#summary One-sentence summary of this page.


<h1>Tips and tricks</h1>

<p> This is the 6th part of the VLDocking Framework tutorial for Java Swing applications.
<p>
In this tutorial, you will learn some useful tips about VLDocking.

<ul>
	<li> <a href="index.php">
	Back to table of contents</a></li>
</ul>


<h2>Visual tips</h2>

<h3>Notifications</h3>
<p>
  A notification mecanism is available on the DockKey component.
<p>
  Although simple, it gives you a means to attract user attention on a Dockable.
<p>
  The default implementation makes the title bar/autohide-button blink until the
  dockable container gets the keyboard focus.
<p>
  To use it, simply call <code>setNotification(true)</code> on the dockable's DockKey.

<h3>Changing the default location of auto-hide buttons</h3>
<p>
  You have a two level access to the border used to show auto-hide buttons :
 <ul>
   <li> Global : use <code>AutoHidePolicy.getPolicy().setDefaultHideBorder(DockingConstants.Hide hide);</code>
     <p>
       This will put the auto-hide button on the selected border.
     <p>
     <DIV class="example">
    For example, to put the buttons at the bottom of the desktop, use :
    <pre>
       AutoHidePolicy.getPolicy().setDefaultHideBorder(DockingConstants.HIDE_BOTTOM);
    </pre>
     </DIV> </li>
   <li> Local : use the <code>DockKey</code> instance method <code>setAutoHideBorder(DockingConstants.Hide hide)</code>
       to select the border used for that Dockable.
     <p> The Local setting is evaluated before the Global setting, and global setting is
         used only if the local setting is <code>null</code>.
     <DIV class="example">
   For example, to put the editorPanel button on the right border of the desktop, use :
    <pre>
      editorPanel.getDockKey().setDefaultHideBorder(DockingConstants.HIDE_RIGHT);
    </pre>
     </DIV> </li>
</ul>
<p>
  <b> Note </b> : Have a look at the AutoHidePolicy class, as it contains other customizations
  of the auto-hide buttons and borders (gap between buttons, click or rollover selection...).


<h2>Other tips</h2>

  <h3>The DockingSelectorDialog</h3>
  <p>
    The <code>com.vlsolutions.swing.docking.DockingSelectorDialog</code> will have
  its own lesson soon. From now on, look at its javadoc : it is a helpfull class
  you can use to let the user choose the dockables to show and
  those to close.
<p>
    It is also customizable : you can change the "wizard label", and every other
    text displayed.
<p>
   Look at the following screenshot to have an idea of what it looks like :
 <p align="center">
   <img src="/images/tutorial/dockingselector.jpg"><br>
   The Docking Selector Dialog
 </p>
<p>
